/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package cryptguard;
/**
 *
 * @author Sheraz
 */
import digest.*;
import java.io.PrintWriter;

public class Cryptguard_Modules
{
 PrintWriter pw = new PrintWriter(System.out, true);
 private final int[] log = {
 0x0, 0x0, 0x19, 0x1, 0x32, 0x2, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68,
 0x33, 0xee, 0xdf, 0x3, 0x64, 0x4, 0xe0, 0xe, 0x34, 0x8d, 0x81, 0xef,
 0x4c, 0x71, 0x8, 0xc8, 0xf8, 0x69, 0x1c, 0xc1, 0x7d, 0xc2, 0x1d, 0xb5,
 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x9, 0x78,
 0x65, 0x2f, 0x8a, 0x5, 0x21, 0xf, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45,
 0x35, 0x93, 0xda, 0x8e, 0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94,
 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38, 0x66, 0xdd, 0xfd, 0x30,
 0xbf, 0x6, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10,
 0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54,
 0xfa, 0x85, 0x3d, 0xba, 0x2b, 0x79, 0xa, 0x15, 0x9b, 0x9f, 0x5e, 0xca,
 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57, 0xaf, 0x58, 0xa8, 0x50,
 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8,
 0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0xb, 0xf5, 0x59, 0xcb, 0x5f, 0xb0,
 0x9c, 0xa9, 0x51, 0xa0, 0x7f, 0xc, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec,
 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7, 0xcc, 0xbb, 0x3e, 0x5a,
 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d,
 0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd,
 0x37, 0x3f, 0x5b, 0xd1, 0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47,
 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab, 0x44, 0x11, 0x92, 0xd9,
 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5,
 0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0xd, 0x63, 0x8c, 0x80,
 0xc0, 0xf7, 0x70, 0x7 };

/**
 * The anti logarithm table for multiplication
 */
private final int[] alog = {
 0x1, 0x3, 0x5, 0xf, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96,
 0xa1, 0xf8, 0x13, 0x35, 0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4,
 0xf7, 0x2, 0x6, 0xa, 0x1e, 0x22, 0x66, 0xaa, 0xe5, 0x34, 0x5c, 0xe4,
 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31,
 0x53, 0xf5, 0x4, 0xc, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8,
 0xd3, 0x6e, 0xb2, 0xcd, 0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7,
 0x62, 0xa6, 0xf1, 0x8, 0x18, 0x28, 0x78, 0x88, 0x83, 0x9e, 0xb9, 0xd0,
 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a,
 0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0xb, 0x1d, 0x27, 0x69,
 0xbb, 0xd6, 0x61, 0xa3, 0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec,
 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0, 0xfb, 0x16, 0x3a, 0x4e,
 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41,
 0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74,
 0x9c, 0xbf, 0xda, 0x75, 0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e,
 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80, 0x9b, 0xb6, 0xc1, 0x58,
 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54,
 0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x7, 0x9, 0x1b, 0x2d, 0x77, 0x99,
 0xb0, 0xcb, 0x46, 0xca, 0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91,
 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0xe, 0x12, 0x36, 0x5a, 0xee,
 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0xd, 0x17,
 0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4,
 0xc7, 0x52, 0xf6, 0x1 };



 static java.io.PrintWriter pm = new java.io.PrintWriter(System.out,true);
// private int BLOCK_SIZE;
// private int NUM_OF_Bytes ;
 public Cryptguard_Modules()
 {

 }
 public int mul(int a, int b)
 {
        return (a != 0 && b != 0)? alog[(log[a & 0xFF] + log[b & 0xFF]) % 255]:0;
 }

 
 public byte[] bitSlicing(byte[] in, int[] map,int BLOCK_SIZE)
 {
    // /*
        int numOfBytes = BLOCK_SIZE/8 ;
        byte[] out = new byte[numOfBytes];
        for (int i=0; i<numOfBytes*8; i++)
        {
            int val = getBit(in,map[i]);
            setBit(out,i,val);
        }
        return out;//*/
    // return in;
 }
 public void write_OnScreen(String message)
 {
    pm.println(message);
 }
 private static int getBit(byte[] data, int pos)
 {
        int posByte = pos/8;
        int posBit = pos%8;
        byte valByte = data[posByte];
        int valInt = valByte>>(8-(posBit+1)) & 0x0001;
        return valInt;
 }
 private void setBit(byte[] data, int pos, int val)
 {
        int posByte = pos/8;
        int posBit = pos%8;
        byte oldByte = data[posByte];
        oldByte = (byte) (((0xFF7F>>posBit) & oldByte) & 0x00FF);
        byte newByte = (byte) ((val<<(8-(posBit+1))) | oldByte);
        data[posByte] = newByte;

 }

 public byte [] generateHash512 (byte [] in)
{
    SHA512Digest MessageDigest = new  SHA512Digest ();
    MessageDigest.update(in, 0, in.length);
    byte [] out = new byte [MessageDigest.getDigestSize()];
    MessageDigest.doFinal(out, 0);
    return out;
}

 public int [] set_Inverse_BitSlicing( int BLOCK_SIZE )
    {
       int [] Inv_BitSlice_Map = new int [BLOCK_SIZE];
       int i,j,index=0;
        for(j=0;j<8;j++)
        {
            for(i=j;i<BLOCK_SIZE;i=i+8)
            {
                Inv_BitSlice_Map[i] = index++;
            }
        }
     return Inv_BitSlice_Map;
    }
 
public int[] set_BitSlicing(int BLOCK_SIZE)
    {
        int [] BitSlice_Map = new int [BLOCK_SIZE];
        int i,j;
        int index = 0;
        for(j=0;j<8;j++)
        {
            for(i=j;i<BLOCK_SIZE;i=i+8)
            {
                BitSlice_Map[index++] = i;
         //       if(index % 16 == 0) System.out.println();
         //       System.out.print(","+bit_slice[index-1]);
            }
        }
        return BitSlice_Map;
    }
public long bytePackingShort(byte [] bcheck) throws Exception{
        //pw.println("bcheck length is" + bcheck.length) ;
        if (bcheck.length != 2) throw new Exception(" Byte Pack Size Wrong");
        short [] icheck = new short[2];
        short res=0;
        short acc = 0;
        for (int i=0; i<2; i++)
            icheck[i]= (short)(bcheck[i] & 0xff) ;

    for(int i=0; i<2;i++)
        {
            res=0;
            res=  (short)(icheck[1-i] << (i*8)) ;
            acc|= res;
    }
        return acc;
    }

public int bytePacking(byte [] bcheck) throws Exception{
        //pw.println("bcheck length is " + bcheck.length) ;
        if (bcheck.length != 4) throw new Exception(" Byte Pack Size Wrong");
        int [] icheck = new int[4];
        int res=0;
        int acc = 0;
        for (int i=0; i<4; i++)
            icheck[i]= bcheck[i] & 0xff  ;

    for(int i=0; i<4;i++)
        {
            res=0;
            res= icheck[3-i] << (i*8) ;
            acc|= res;
    }
        return acc;
    }

public long bytePackingLong(byte [] bcheck) throws Exception{
        //pw.println("bcheck length is" + bcheck.length) ;
        if (bcheck.length != 8) throw new Exception(" Byte Pack Size Wrong");
        long [] icheck = new long[8];
        long res=0;
        long acc = 0;
        for (int i=0; i<8; i++)
            icheck[i]= bcheck[i] & 0xff  ;

    for(int i=0; i<8;i++)
        {
            res=0;
            res= icheck[7-i] << (i*8) ;
            acc|= res;
    }
        return acc;
    }

 public byte [] mixColumns(byte[] txt)
    {
        byte[] tmp = new byte[16];
        int dim = 4;
        System.arraycopy(txt,0,tmp,0,16);
        for(int i =0;i<dim;i++)
        {
                txt[i] = (byte) (mul(2,tmp[i]) ^ mul(3,tmp[4+i]) ^ tmp[8+i]^ tmp[12+i]);
                txt[4+i] = (byte) (mul(2,tmp[4+i]) ^ mul(3,tmp[8+i]) ^ tmp[i]^ tmp[12+i]);
                txt[8+i] = (byte) (mul(2,tmp[8+i]) ^ mul(3,tmp[12+i]) ^ tmp[4+i]^ tmp[i]);
                txt[12+i] = (byte) (mul(2,tmp[12+i]) ^ mul(3,tmp[i]) ^ tmp[8+i]^ tmp[4+i]);
        }
        return txt;
     }

    public byte [] invMixColumns(byte[] txt)
    {
        byte[] tmp = new byte[16];
        int dim = 4;
        System.arraycopy(txt,0,tmp,0,16);
        for(int i =0;i<dim;i++)
        {
                txt[i] = (byte) (mul(0x0E,tmp[i]) ^ mul(0x0B,tmp[4+i]) ^mul(0x0D,tmp[8+i]) ^ mul(0x09,tmp[12+i]));
                txt[4+i] = (byte) (mul(0x09,tmp[i]) ^ mul(0x0E,tmp[4+i]) ^mul(0x0B,tmp[8+i]) ^ mul(0x0D,tmp[12+i]));
                txt[8+i] = (byte) (mul(0x0D,tmp[i]) ^ mul(0x09,tmp[4+i]) ^mul(0x0E,tmp[8+i]) ^ mul(0x0B,tmp[12+i]));
                txt[12+i] = (byte) (mul(0x0B,tmp[i]) ^ mul(0x0D,tmp[4+i]) ^mul(0x09,tmp[8+i]) ^ mul(0x0E,tmp[12+i]));
        }
        return txt;
    }
public String printHex(byte[] buf){
String str = "";
String temp = "";
for(int i=0;i<buf.length;i++){
        temp += Integer.toHexString(buf[i] & 0xFF);
        if (temp.length()<2) temp = "0"+temp;
        str += temp;
        temp = "";
        }
        return str;
}
}
